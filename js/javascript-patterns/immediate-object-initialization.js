/**
 * 即時オブジェクト初期化
 *
 * このパターンは init() メソッドのあるオブジェクトを使う。
 * オブジェクトを作成した直後にこのメソッドを実行する。
 * init() 関数は初期化の作業をすべて行う。
 *
 * @see "JavaScript Patterns" - Stoyan Stefanov
 */

({
    // ここで設定値を定義できる
    maxwidth: 600,
    maxheight: 400,

    // ユーティリティメソッドも定義できる
    gimmeMax: function () {
        return this.maxwidth + "x" + this.maxheight;
    },

    // 初期化
    init: function () {
        console.log(this.gimmeMax());
        // その他の初期化作業

        /* オブジェクトを初期化した後
         * そのオブジェクトへの参照を保持したければ、
         * init() の最後に return this; を追加する。
         */
    }


}).init();


/* オブジェクトだけを包むかわりに、オブジェクトと init() 呼び出しを
 * グループ化の括弧で包むこともできる。すなわち、次のどちらでも動く。
 *
 * ({...}).init();
 * ({...}.init());
 *
 * このパターンの利点は即時関数パターンと同じで、
 * 1回きりの初期化作業を実行する間グローバル名前空間を保護する。
 * 初期化作業がより複雑になると、初期化手続き全体に構造を作ることができる。
 * プライベートヘルパー関数は一時オブジェクトのプロパティなので区別がつくが、
 * 即時関数の場合、あちこちに散らばってしまった関数にしか見えない。
 *
 * このパターンの欠点：
 * JavaScriptのミニファイアのほとんどは、このパターンをミニファイするとき、
 * コードを関数で包んだだけの場合と同じようには効率的に処理しない。
 */
